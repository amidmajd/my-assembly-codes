.DEF OUTPUT = R25			// 0x01 FOR SIDE 1 & 0X02 FOR SIDE 2
.DEF STATE_COUNTER = R24	// STATE COUNTER
.DEF TCOUNTER = R23			// IF TCOUNTER == TCOUNTER_LIMIT == 4 => 1 SEC PASSED
.DEF TCOUNTER_LIMIT = R22	// TIMER IN 1/1024 CLK SCALE
.DEF TCOUNTER_YELLOW = R21	// DEFAULT MICRO SPEED = 1MHz
							// 244 * 4 * 1024

.ORG 0x00
	JMP init
.ORG 0x02
	JMP ISR_INT0_SIDE_1
.ORG 0x04
	JMP ISR_INT1_SIDE_2
.ORG 0X16
	JMP ISR_TIMER0

.ORG 0X500					// OUTPUT STATES
.DB 0X21, 0X22, 0X0C, 0X14
// STATE0	S1:GREEN	S2:RED			[00 100 001]
// STATE1	S1:YELLOW	S2:RED			[00 100 010]
// STATE2	S1:RED		S2:GREEN		[00 001 100]
// STATE3	S1:RED		S2:YELLOW		[00 010 100]


.ORG 0x100
init:
	// INITIALIZING STACK POINTER
    LDI R16, HIGH(RAMEND)
	OUT sph, R16
	LDI R16, LOW(RAMEND)
	OUT SPL, R16

	// INITIALIZING PORTS
	LDI R16, 0XFF
	OUT DDRC, R16			// PORTC AS OUTPUT (PORTB.1 : SIDE 1, PORTB.2 : SIDE 2)
	SBI PORTD, 2			// PORTD.2 PULLUP FOR #INT0
	SBI PORTD, 3			// PORTD.3 PULLUP FOR #INT1

	// INITIALIZING LOCAL VARIABLES
	LDI OUTPUT, 0X00
	LDI TCOUNTER, 0X00
	LDI STATE_COUNTER, 0X00
	LDI TCOUNTER_LIMIT, 16	// ONE SIDE FOR 4 SEC (4*4) [GREEN + YELLOW]
	LDI TCOUNTER_YELLOW, 10	// ONLY YELLOW FOR 1.5 SEC (16 - 1.5*4)

	// MEMEORY
	LDI ZL, LOW(0X500<<1)	// START ADDRESS IN MEMORY FOR OUTPUT STATES
	LDI ZH, HIGH(0X500<<1)	


	// INITIALIZING EXTERNAL INTERRUPTS
	LDI R16, (1<<INT0) | (1<<INT1)
	OUT GICR, R16
	LDI R16, 0X0F		
	OUT MCUCR, R16			// INT0 & INT1 IN HIGH EDGE ACTIVE MODE

	// INITIALIZING TIMER0
	LDI R16, -244
	OUT TCNT0, R16
	LDI R16, 0X05
	OUT TCCR0, R16			// TIMER0 IN NORMAL MODE => 1/1024 CLK SCALE
	
	LDI R16, 1<<TOIE0		// TIMER0 OVERFLOW INTERRUPT
	OUT TIMSK, R16

	// ENABLING GLOBAL INTERRUPT
	SEI
	

main_loop:
	LDI ZL, LOW(0X500<<1)
	ADD ZL, STATE_COUNTER
	LPM OUTPUT, Z			// GETTING OUTPUT FROM MEMORY BASED ON STATE
	OUT PORTC, OUTPUT
	RJMP main_loop


ISR_TIMER0:
	INC TCOUNTER
	CP TCOUNTER, TCOUNTER_YELLOW
	BREQ yellow
	CP TCOUNTER, TCOUNTER_LIMIT
	BRNE not_yet
	CALL REST_TIMER			// RESETTING TIMER
	CALL LIGHT_CONTROL		// STUFF TO DO AFTER
	RETI
yellow:
	CALL LIGHT_CONTROL
	RETI
not_yet:
	RETI


// INTERRUPT ROUTINE FOR INT2
// EMERGENCY REQUEST FOR GREEN LIGHT (OLD PEOPLE, ...)
// SIDE 1
ISR_INT0_SIDE_1:
	LDI STATE_COUNTER, 0X00
	CALL REST_TIMER			// RESETTING TIMER
	RETI


// INTERRUPT ROUTINE FOR INT2
// EMERGENCY REQUEST FOR GREEN LIGHT (OLD PEOPLE, ...)
// SIDE 2
ISR_INT1_SIDE_2:
	LDI STATE_COUNTER, 0X02
	CALL REST_TIMER			// RESETTING TIMER
	RETI


//MAIN LIGHT CONTROLLER
LIGHT_CONTROL:
	INC STATE_COUNTER
	LDI R18, 0X04
	CP R18, STATE_COUNTER
	BREQ reset_state
	RET
reset_state:
	LDI STATE_COUNTER, 0X00
	RET


// RESETTING TIMER
REST_TIMER:
	LDI TCOUNTER, 0X00		
	LDI R16, -244
	OUT TCNT0, R16
	RET